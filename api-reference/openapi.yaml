openapi: 3.0.3
info:
  title: Get Medium Data
  description: "### **Get Medium** Data**: Unlock the Power of Medium Data Programmatically**\n\nThe **Get Medium Data** is a powerful tool designed to help developers, businesses, and content enthusiasts programmatically access and retrieve data from **Medium.com**.  \nWhether you're building analytics tools, content aggregators, or  \nresearch platforms, our API provides seamless access to a wealth of  \nMedium data, enabling you to make data-driven decisions and create  \ninnovative solutions.\n\n#### **What Can You Do with Get Medium** Data**?**\n\nWith the Get Medium Data, you can effortlessly fetch and analyze data related to:\n\n- **Authors**: Retrieve detailed information about Medium authors, including their profiles and publication history.\n    \n- **Articles**: Access comprehensive data about Medium articles, such as titles, content, claps, responses, and publication dates.\n    \n- **Publications**: Gather insights into Medium publications, including their follower, articles.\n    \n- **User Lists**:  \n    Programmatically fetch user-generated lists, such as reading lists or  \n    curated collections, to understand trending topics and user preferences.\n    \n- **Tags**: Explore data related to Medium tags, including popular articles, trending topics, and tag-specific analytics.\n    \n\n#### **Why Choose Get Medium** Data**?**\n\n- **Ease of Integration**: Our API is designed with developers in mind, offering clear documentation, robust endpoints, and scalable infrastructure.\n    \n- **Comprehensive Data Access**: Gain access to a wide range of Medium data points, empowering you to build tailored solutions for your unique needs.\n    \n- **Reliable and Secure**: Built with enterprise-grade security and reliability, ensuring your data requests are handled efficiently and securely.\n    \n- **Scalable Solutions**:  \n    Whether you're a startup or an enterprise, our API scales with your  \n    needs, providing consistent performance as your usage grows.\n    \n\n#### **Use Cases**\n\n- **Content Analysis**: Analyze trends, engagement metrics, and author performance to identify high-performing content.\n    \n- **Competitor Research**: Monitor competitors' Medium activity, including their most popular articles and audience engagement.\n    \n- **Personalized Recommendations**: Build recommendation engines by leveraging data on tags, user lists, and trending topics.\n    \n- **Market Research**: Use Medium data to understand industry trends, audience preferences, and content gaps."
  version: 1.0.0
  contact: {}
servers:
  - url: get-medium-data.p.rapidapi.com
paths:
  /tags/{tag}:
    get:
      tags:
        - tags
      summary: Get Tag by ID
      description: This endpoint allows you to retrieve detailed information about a specific **tag** on Medium, including its name, description, popularity metrics. This is useful for analyzing tag trends, building content discovery tools, or integrating tag data into your applications.
      operationId: getTag
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullTag"
              example:
                id: "golang"
                name: "Golang"
                slug: "golang"
                followersCount: 15862
                postCount: 26908
                children: []
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
              example:
                timestamp: "2025-02-13T19:02:54.477Z"
                statusCode: 404
                error: "Route not found"
                message: "Route not found. Method: GET, path: /nesto"
                path: "/nesto"
  /tags/{tag}/related:
    get:
      tags:
        - tags
      summary: Get Related Tags for Tag
      description: "This endpoint allows you to retrieve a list of **related tags**  \nfor a specific tag on Medium. Related tags are determined based on factors such as shared topics, user engagement, or content overlap. This is useful for building content discovery tools, analyzing tag relationships, or enhancing recommendation systems."
      operationId: relatedTags
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChildrenTag"
              example:
                - id: "go"
                  name: "Go"
                - id: "programming"
                  name: "Programming"
                - id: "software-development"
                  name: "Software Development"
  /tags/root:
    get:
      tags:
        - tags
      summary: Get Root Tags
      description: "This endpoint allows you to retrieve a list of **root tags**  \non Medium. Root tags are top-level or parent tags that represent broad categories or themes (e.g., \"Technology,\" \"Life,\" \"World\"). These tags are useful for organizing content, building navigation systems, or analyzing high-level trends."
      operationId: rootTags
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ChildrenTag"
              example:
                - id: "life"
                  name: "Life"
                - id: "self-improvement"
                  name: "Self Improvement"
                - id: "work"
                  name: "Work"
  /tags/{tag}/recommended-authors:
    get:
      tags:
        - tags
      summary: Get Recommended Authors for Tag
      description: This endpoint allows you to retrieve a list of **recommended authors** who frequently write about a specific tag. These authors are selected based on their expertise, engagement metrics, and the popularity of their articles related to the tag. This is useful for discovering influential writers, building recommendation systems, or enhancing content discovery.
      operationId: recommendedAuthors
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
        - name: next_page_id
          in: query
          schema:
            type: string
            example: f504e6b624
          description: A unique string (cursor/token) that represents the starting point for the next set of authors. Omit this parameter for the first request.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  nextPage:
                    type: "object"
                    properties:
                      id:
                        type: string
                  publishers:
                    type: array
                    items:
                      $ref: "#/components/schemas/RecommendedAuthor"
              example:
                nextPage:
                  id: "b1cc3935b07d"
                publishers:
                  - id: "02c54ef008b2"
                    name: "Shivam Srivastava"
                    type: "USER"
                  - id: "d3a191ac6ed"
                    name: "Javarevisited"
                    type: "PUBLICATION"
  /tags/{tag}/recommended-lists:
    get:
      tags:
        - tags
      summary: Get Recommended Lists for Tag
      description: This endpoint allows you to retrieve a list of **recommended lists** (e.g., reading lists, curated collections) that are associated with a specific tag. These lists are typically created by Medium users or publications and can provide valuable insights into how the tag is being categorized, shared, or recommended within the Medium ecosystem.
      operationId: recommendedLists
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RefList"
              example:
                - id: "b28a34519546"
                  name: "Apple's Vision Pro"
                  creator:
                    id: "1f3525a89b41"
                    name: "Nuno Moreira"
                    username: "nmoreira"
                - id: "541154dfb3ae"
                  name: "Tech & Tools"
                  creator:
                    id: "53853e5893fb"
                    name: "Josh Buesseler"
                    username: "wearedelicious"
  /tags/{tag}/top-articles:
    get:
      tags:
        - tags
      summary: Get Top Articles for Tag
      description: Retrieve the most popular articles on Medium for a specific tag. This endpoint allows you to identify trending content and explore topics of interest. The endpoint will return 15 top articles for given topic.
      operationId: topArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RefArticle"
              example:
                - articleId: "e07383f22844"
                  title: "Three Months With the M4 Mac mini"
                  imageUrl: "https://miro.medium.com/1*9POXgGoTcMJgnWtHQmnrTQ.jpeg"
                  url: "https://medium.com/macoclock/three-months-with-the-m4-mac-mini-e07383f22844"
                  slug: "three-months-with-the-m4-mac-mini-e07383f22844"
                  author:
                    id: "665f2b5379e3"
                    name: "Mark Ellis"
                    username: "markellisreviews"
                - articleId: "bd9a4566dfb9"
                  title: "Forgetfulness & ADHD? How This Simple App Saved My Workday (And My Sanity)"
                  imageUrl: "https://miro.medium.com/1*koRRjS0h_Jgr6cDepOK8Mg.png"
                  url: "https://medium.com/humans-with-adhd/forgetfulness-adhd-how-this-simple-app-saved-my-workday-and-my-sanity-bd9a4566dfb9"
                  slug: "forgetfulness-adhd-how-this-simple-app-saved-my-workday-and-my-sanity-bd9a4566dfb9"
                  author:
                    id: "7b38efbebd4"
                    name: "Gray Miller"
                    username: "graymiller"
  /tags/{tag}/latest-articles:
    get:
      tags:
        - tags
      summary: Latest Articles
      description: Fetch the newest articles on Medium associated with a given tag. This endpoint is ideal for staying up-to-date on the latest discussions and trends. The endpoint will return 20 latest articles
      operationId: latestArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
      responses:
        "200":
          description: ""
  /tags/{tag}/recommended-articles:
    get:
      tags:
        - tags
      summary: Recommended Articles
      description: Fetch a list of Medium articles recommended for a given tag.
      operationId: recommendedArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
        - name: from
          in: query
          schema:
            type: string
            example: "10"
          description: The offset from which to start retrieving articles.  This is used for pagination.  Default is 0 (start from the beginning).
        - name: limit
          in: query
          schema:
            type: string
            example: "25"
          description: "Limit the number of response returned (default: 10, max: 25, min: 1)."
      responses:
        "200":
          description: ""
  /tags/{tag}/archived-articles:
    get:
      tags:
        - tags
      summary: Archived Articles
      description: Access historical content on Medium for any tag. This endpoint allows you to delve into past articles and research trends over time.
      operationId: archivedArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: tag
          schema:
            type: string
          required: true
          description: Unique identifier of tag
        - name: month
          in: query
          schema:
            type: string
            example: "1"
          description: The month to filter by (1-12). (e.g., `10` for October)
        - name: year
          in: query
          schema:
            type: string
            example: "2024"
          description: The year to filter by. (e.g., `2023`)
        - name: limit
          in: query
          schema:
            type: string
            example: "25"
          description: The maximum number of articles to return per request. Default is 20. Maximum allowed limit should be documented (e.g., max 20).
        - name: sort_order
          in: query
          schema:
            type: string
            example: MOST_READ
          description: "The sorting order.  Possible values: NEWEST, OLDEST, MOST_READ. Default value: MOST_READ"
        - name: next_page_id
          in: query
          schema:
            type: string
            example: '{\"column\":{\"S\":\"10c0a5d07142\"},\"postPublishedAt\":{\"N\":\"1706634121535\"},\"tagSlug\":{\"S\":\"apple\"}}'
          description: The token of the next page to retrieve.  This is used for pagination.  If not provided, the first page is returned.
      responses:
        "200":
          description: ""
  /tags/search:
    get:
      tags:
        - tags
      summary: Search Tags
      description: Retrieve a paginated list of tags based on query.
      operationId: searchTags
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: query
          in: query
          schema:
            type: string
            example: java
          description: Filter tags by query
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of tags returned (default: 30, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 1
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
  /publications/{publication_id}:
    get:
      tags:
        - publications
      summary: Get Publication
      description: Get publication by ID. Retrieve comprehensive information about a specific publication, including its description, subscriber coun, and other relevant data.
      operationId: getPublication
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: publication_id
          schema:
            type: string
          required: true
          description: Unique identifier of publication
      responses:
        "200":
          description: ""
  /publications/{publication_id}/newsletter:
    get:
      tags:
        - publications
      summary: Newsletter
      description: |-
        Get publication newsletter

        Fetch details about a publication's newsletter.
      operationId: newsletter
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: publication_id
          schema:
            type: string
          required: true
          description: Unique identifier of publication
      responses:
        "200":
          description: ""
  /publications/{publication_id}/articles:
    get:
      tags:
        - publications
      summary: Articles
      description: |-
        Get publication articles

        Fetch a list of articles published by a given publication. This endpoint allows you to explore the content published by a specific source.
      operationId: articles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: publication_id
          schema:
            type: string
          required: true
          description: Unique identifier of publication
        - name: limit
          in: query
          schema:
            type: number
            example: 10
          description: "Limit the number of artucles returned (default: 20, max: 25)."
        - name: from
          in: query
          schema:
            type: string
            example: L1737683820185
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
      responses:
        "200":
          description: ""
  /publications/search:
    get:
      tags:
        - publications
      summary: Search Publications
      description: Retrieve a paginated list of publications based on query.
      operationId: searchPublications
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: query
          in: query
          schema:
            type: string
            example: java
          description: Filter publications by query
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of publications returned (default: 20, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 1
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
  /users/{username}:
    get:
      tags:
        - users
      summary: Get User
      description: Retrieve detailed information about a specific user using their unique username
      operationId: getUser
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
      responses:
        "200":
          description: ""
  /users/{username}/books:
    get:
      tags:
        - users
      summary: Books
      description: |-
        Get user books

        Fetch a list of books belonging to a specific user. This endpoint provides information about the books user has published.
      operationId: books
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
      responses:
        "200":
          description: ""
  /users/search:
    get:
      tags:
        - users
      summary: Search Users
      description: Retrieve a paginated list of articles based on query.
      operationId: searchUsers
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: query
          in: query
          schema:
            type: string
            example: java
          description: Filter users by query
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of users returned (default: 20, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 1
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
  /users/{username}/lists:
    get:
      tags:
        - users
      summary: Lists
      description: |-
        Get user lists

        Fetch a list of lists belonging to a specific user. This endpoint provides information about the lists created or owned by a user.
      operationId: lists
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
        - name: next_page_id
          in: query
          schema:
            type: string
            example: '{\"catalogId\":{\"s\":\"c0bc1c468d81\"},\"column\":{\"s\":\"@\"},\"creatorId\":{\"s\":\"2eb23a991a63\"},\"updatedAt\":{\"n\":\"1736759746724\"}}'
          description: The token of the next page to retrieve.  This is used for pagination.  If not provided, the first page is returned.
      responses:
        "200":
          description: ""
  /users/{username}/publications:
    get:
      tags:
        - users
      summary: Publications
      description: "Get user publications  \n  \nFetch a list of publications created or owned by a specific user. This endpoint provides information about the publications associated with a user's account."
      operationId: publications
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
      responses:
        "200":
          description: ""
  /users/{username}/publications/following:
    get:
      tags:
        - users
      summary: Publications User Following
      description: "Get following publications.  \n  \nFetch a list of publications that a specific user is following. This endpoint provides information about the publications a user has subscribed to or follows."
      operationId: publicationsUserFollowing
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
      responses:
        "200":
          description: ""
  /users/{username}/following:
    get:
      tags:
        - users
      summary: Following Users
      description: |-
        Get authors author is following

        Fetch a list of authors that a specific author is following. This endpoint provides information about the authors an author has followed.
      operationId: followingUsers
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
        - name: from
          in: query
          schema:
            type: string
            example: "1712676630203"
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of response returned (default: 20, max: 25, min: 1)."
      responses:
        "200":
          description: ""
  /users/{username}/followers:
    get:
      tags:
        - users
      summary: Followers
      description: Get author followers. Fetch a list of users who are following a given author. This endpoint provides information about the users who have subscribed to or follow an author.
      operationId: followers
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
        - name: from
          in: query
          schema:
            type: string
            example: "11440157aa09"
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of response returned (default: 20, max: 25, min: 1)."
      responses:
        "200":
          description: ""
  /users/{username}/articles:
    get:
      tags:
        - users
      summary: Articles
      description: Fetch a list of articles published by a specific user.
      operationId: articles1
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: username
          schema:
            type: string
          required: true
          description: A username is a unique identifier for a user on Medium
        - name: from
          in: query
          schema:
            type: string
            example: L1642993786523
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of artucles returned (default: 20, max: 25)."
      responses:
        "200":
          description: ""
  /articles/{article_id}:
    get:
      tags:
        - articles
      summary: Get Article
      description: Fetch a single Medium article using its unique identifier. This endpoint provides detailed information about the article.
      operationId: getArticle
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
      responses:
        "200":
          description: ""
  /articles/search:
    get:
      tags:
        - articles
      summary: Search Articles
      description: Retrieve a paginated list of articles based on query.
      operationId: searchArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: query
          in: query
          schema:
            type: string
            example: java
          description: Filter article by query
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of articles returned (default: 20, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 0
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
  /articles/{article_id}/voters:
    get:
      tags:
        - articles
      summary: Voters
      description: This endpoint allows you to retrieve a list of users who have voted (e.g., clapped) for a specific article on Medium. This information can be useful for analyzing audience engagement, identifying influential readers, or building community-focused features.
      operationId: voters1
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "The maximum number of voters to return per page. (default: 20, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 1
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
  /articles/{article_id}/related-articles:
    get:
      tags:
        - articles
      summary: Related Articles
      description: "This endpoint allows you to retrieve a list of articles that are related  \nto a specific article on Medium. These related articles are determined  \nbased on factors such as shared tags, similar content, or user  \nengagement patterns. Maximum 25 articles are returned."
      operationId: relatedArticles
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
      responses:
        "200":
          description: ""
  /articles/{article_id}/recommended-lists:
    get:
      tags:
        - articles
      summary: Recommended Lists
      description: "This endpoint allows you to retrieve a list of **recommended reading lists** or **curated collections**  \nthat include a specific article. These lists are typically created by  \nMedium users or publications and can provide valuable insights into how  \nthe article is being categorized, shared, or recommended within the  \nMedium ecosystem. Maximum 20 lists are returned."
      operationId: recommendedLists1
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
      responses:
        "200":
          description: ""
  /articles/{article_id}/responses:
    get:
      tags:
        - articles
      summary: Responses
      description: "This endpoint allows you to retrieve **responses (comments)**  \nfor a specific article on Medium. The responses are paginated, and you  \ncan control the number of responses returned per request using the `limit` parameter. To manage pagination, the API uses a **unique string** (e.g., a cursor or token) that indicates the starting point for the next set of responses."
      operationId: responses1
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
        - name: limit
          in: query
          schema:
            type: number
            example: 10
          description: "Limit the number of response returned (default: 10, max: 25, min: 1)."
        - name: to
          in: query
          schema:
            type: string
            example: 4.1737300078568005:4d7952c9533a
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
      responses:
        "200":
          description: ""
  /articles/url-to-article-id:
    get:
      tags:
        - articles
      summary: URL to Article ID
      description: "This endpoint allows you to extract the **unique article ID**  \nfrom a Medium article URL. This is useful when you have an article URL  \nand need its corresponding ID to interact with other API endpoints that  \nrequire an `article_id`."
      operationId: urlToArticleId
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: url
          in: query
          schema:
            type: string
            example: https://blog.codingwinner.com/my-saas-journey-i-reached-my-100k-arr-goal-new-one-500k-arr-by-2026-754ac6c8c134
          description: The full URL of the Medium article.
      responses:
        "200":
          description: ""
  /articles/{article_id}/html:
    get:
      tags:
        - articles
      summary: Content HTML
      description: "This endpoint allows you to retrieve the **publicly visible content** of a Medium article in **HTML format**.  \nThis is useful for displaying article content on your platform,  \nanalyzing the structure of the content, or integrating it into other  \napplications."
      operationId: contentHtml
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
      responses:
        "200":
          description: ""
  /articles/{article_id}/markdown:
    get:
      tags:
        - articles
      summary: Content Markdown
      description: "This endpoint allows you to retrieve the **publicly visible content** of a Medium article in **markdown format**.  \nThis is useful for displaying article content on your platform,  \nanalyzing the structure of the content, or integrating it into other  \napplications."
      operationId: contentMarkdown
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: article_id
          schema:
            type: string
          required: true
          description: An article ID is a unique identifier for an article on Medium
      responses:
        "200":
          description: ""
  /:
    get:
      summary: Get Service Information
      description: "The endpoint provides essential information about the API"
      operationId: index
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  api_name:
                    type: string
                  description:
                    type: string
                  medium-api-version:
                    type: string
                  medium-client-version:
                    type: string
                  contact:
                    type: object
                    properties:
                      email:
                        type: string
                      website:
                        type: string
              example:
                api_name: "Get Medium Data"
                description: "Programmatically fetch data from Medium.com, including authors, articles, publications, user lists, and tags."
                medium-api-version: "1.0.0"
                medium-client-version: "1.0.23"
                contact:
                  email: "support@getmediumdata.com"
                  website: "https://www.getmediumdata.com"
  /lists/{list_id}:
    get:
      tags:
        - lists
      summary: Get List
      description: Quickly retrieve your saved lists using their unique identifiers. This endpoint simplifies accessing and managing your data.
      operationId: getList
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: list_id
          schema:
            type: string
          required: true
          description: A list ID is a unique identifier for a list on Medium
      responses:
        "200":
          description: ""
  /lists/{list_id}/responses:
    get:
      tags:
        - lists
      summary: Responses
      description: Get user responses for list. Gain insights into how users are interacting with list. This endpoint provides valuable data on user responses, allowing you to analyze engagement and improve list performance.
      operationId: responses
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: list_id
          schema:
            type: string
          required: true
          description: A list ID is a unique identifier for a list on Medium
        - name: limit
          in: query
          schema:
            type: number
            example: 2
          description: "Limit the number of response returned (default: 10, max: 25, min: 1)."
        - name: to
          in: query
          schema:
            type: string
            example: "0.1732995416711:c906d3cac2ed"
          description: A unique string (cursor/token) that represents the starting point for the next set of responses. Omit this parameter for the first request.
      responses:
        "200":
          description: ""
  /lists/{list_id}/voters:
    get:
      tags:
        - lists
      summary: Voters
      description: "Get voters for list: Identify Engaged Users. Discover which users have shown their support for a list. This endpoint provides valuable data for understanding user engagement and identifying key contributors."
      operationId: voters
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - in: path
          name: list_id
          schema:
            type: string
          required: true
          description: A list ID is a unique identifier for a list on Medium
        - name: next_page_id
          in: query
          schema:
            type: string
            example: '{\"catalogId\":{\"s\":\"f2d429d4f0cd\"},\"column\":{\"s\":\"f2d429d4f0cd\"},\"firstClapAt\":{\"n\":\"1730621290504\"},\"userId\":{\"s\":\"aa64c1e3b6ce\"}}'
          description: The token of the next page to retrieve.  This is used for pagination.  If not provided, the first page is returned.
      responses:
        "200":
          description: ""
  /lists/search:
    get:
      tags:
        - lists
      summary: Search Lists
      description: Retrieve a paginated list of publications based on query.
      operationId: searchLists
      parameters:
        - in: header
          name: X-RapidAPI-Key
          schema:
            type: string
          required: true
        - name: query
          in: query
          schema:
            type: string
            example: java
          description: Filter lists by query
        - name: limit
          in: query
          schema:
            type: number
            example: 20
          description: "Limit the number of lists returned (default: 20, max: 1000, min: 10)."
        - name: page
          in: query
          schema:
            type: number
            example: 1
          description: "The page number to fetch. Starts at 0. Default: 0."
      responses:
        "200":
          description: ""
components:
  schemas:
    FullTag:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
        slug:
          type: "string"
        followersCount:
          type: "integer"
        postCount:
          type: "integer"
        children:
          type: "array"
          items:
            $ref: "#/components/schemas/ChildrenTag"
    ChildrenTag:
      type: "object"
      properties:
        id:
          type: "string"
        name:
          type: "string"
    RecommendedAuthor:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
        type:
          type: string
    Author:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
        username:
          type: string
    RefList:
      type: "object"
      properties:
        id:
          type: string
        name:
          type: string
        creator:
          $ref: "#/components/schemas/Author"
    RefArticle:
      type: "object"
      properties:
        articleId:
          type: string
        title:
          type: string
        imageUrl:
          type: string
        url:
          type: string
        slug:
          type: string
        author:
          $ref: "#/components/schemas/Author"
    Error:
      type: "object"
      properties:
        timestamp:
          type: string
        statusCode:
          type: integer
        error:
          type: string
        message:
          type: string
        path:
          type: string
tags:
  - name: articles
    description: "The **Articles Endpoints** allow you to programmatically  \nretrieve detailed information about articles published on Medium.com.  \nWhether you're analyzing trends, building content aggregators, or  \nconducting research, these endpoints provide access to a wide range of  \narticle-related data, including titles, content, engagement metrics, and  \nmore."
  - name: users
    description: "The **Users Endpoints** allow you to programmatically  \nretrieve detailed information about Medium users, including their  \nprofiles, activity, and engagement metrics. These endpoints are useful  \nfor building user analytics tools, personalizing content  \nrecommendations, or integrating Medium user data into your applications."
  - name: tags
    description: "The **Tags Endpoints** allow you to programmatically  \nretrieve information about tags on Medium, including articles associated with specific tags. These endpoints are useful for building content discovery tools, analyzing trends, or integrating Medium tag data into your applications."
  - name: publications
    description: "The **Publications Endpoints** allow you to  \nprogrammatically retrieve detailed information about Medium  \npublications, including their contributors, articles, and performance  \nmetrics. These endpoints are useful for building analytics tools,  \ncontent aggregators, or integrating Medium publication data into your  \napplications."
  - name: lists
    description: "The **User Lists Endpoints** allow you to programmatically  \nretrieve information about lists created or curated by Medium users.  \nThese lists can include reading lists, saved articles, or curated  \ncollections. These endpoints are useful for building personalized  \ncontent recommendations, analyzing user preferences, or integrating  \nMedium list data into your applications."
